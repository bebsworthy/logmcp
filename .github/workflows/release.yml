name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for commit analysis

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build binary for tests
        run: |
          go build -o logmcp .
          chmod +x logmcp

      - name: Run tests
        run: go test ./...

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get version info
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%S)
          TAG_NAME=$(date -u +%Y%m%d%H%M%S)
          GIT_COMMIT=$(git rev-parse --short HEAD)
          
          # Get the last release tag (if any)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Generate categorized release notes
          {
            echo "## What's Changed"
            echo ""
            
            # Features
            if [ -n "$LAST_TAG" ]; then
              FEAT_COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep -E "^feat(\(.*\))?:" || true)
            else
              FEAT_COMMITS=$(git log --pretty=format:"%s" | grep -E "^feat(\(.*\))?:" || true)
            fi
            
            if [ -n "$FEAT_COMMITS" ]; then
              echo "### üöÄ Features"
              echo "$FEAT_COMMITS" | while IFS= read -r commit; do
                # Remove feat: prefix and format
                cleaned=$(echo "$commit" | sed -E 's/^feat(\(.*\))?:\s*//')
                echo "- $cleaned"
              done
              echo ""
            fi
            
            # Bug Fixes
            if [ -n "$LAST_TAG" ]; then
              FIX_COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep -E "^fix(\(.*\))?:" || true)
            else
              FIX_COMMITS=$(git log --pretty=format:"%s" | grep -E "^fix(\(.*\))?:" || true)
            fi
            
            if [ -n "$FIX_COMMITS" ]; then
              echo "### üêõ Bug Fixes"
              echo "$FIX_COMMITS" | while IFS= read -r commit; do
                cleaned=$(echo "$commit" | sed -E 's/^fix(\(.*\))?:\s*//')
                echo "- $cleaned"
              done
              echo ""
            fi
            
            # Refactoring
            if [ -n "$LAST_TAG" ]; then
              REFACTOR_COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep -E "^refactor(\(.*\))?:" || true)
            else
              REFACTOR_COMMITS=$(git log --pretty=format:"%s" | grep -E "^refactor(\(.*\))?:" || true)
            fi
            
            if [ -n "$REFACTOR_COMMITS" ]; then
              echo "### ‚ôªÔ∏è Refactoring"
              echo "$REFACTOR_COMMITS" | while IFS= read -r commit; do
                cleaned=$(echo "$commit" | sed -E 's/^refactor(\(.*\))?:\s*//')
                echo "- $cleaned"
              done
              echo ""
            fi
            
            # Documentation
            if [ -n "$LAST_TAG" ]; then
              DOCS_COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep -E "^docs(\(.*\))?:" || true)
            else
              DOCS_COMMITS=$(git log --pretty=format:"%s" | grep -E "^docs(\(.*\))?:" || true)
            fi
            
            if [ -n "$DOCS_COMMITS" ]; then
              echo "### üìö Documentation"
              echo "$DOCS_COMMITS" | while IFS= read -r commit; do
                cleaned=$(echo "$commit" | sed -E 's/^docs(\(.*\))?:\s*//')
                echo "- $cleaned"
              done
              echo ""
            fi
            
            # Chores & Other
            if [ -n "$LAST_TAG" ]; then
              CHORE_COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep -E "^(chore|build|ci|test|perf|style)(\(.*\))?:" || true)
            else
              CHORE_COMMITS=$(git log --pretty=format:"%s" | grep -E "^(chore|build|ci|test|perf|style)(\(.*\))?:" || true)
            fi
            
            if [ -n "$CHORE_COMMITS" ]; then
              echo "### üîß Maintenance"
              echo "$CHORE_COMMITS" | while IFS= read -r commit; do
                cleaned=$(echo "$commit" | sed -E 's/^(chore|build|ci|test|perf|style)(\(.*\))?:\s*//')
                echo "- $cleaned"
              done
              echo ""
            fi
            
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/$TAG_NAME"
            
          } > release_notes.md
          
          # Save release notes to environment
          echo 'RELEASE_NOTES<<EOF' >> $GITHUB_ENV
          cat release_notes.md >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          
          # Export other variables
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_ENV
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      - name: Build binaries
        run: |
          # Get version info
          GIT_COMMIT=$(git rev-parse --short HEAD)
          
          # Build flags
          LDFLAGS="-X github.com/bebsworthy/logmcp/cmd.BuildDate=${BUILD_DATE} -X github.com/bebsworthy/logmcp/cmd.GitCommit=${GIT_COMMIT}"
          
          # Build for multiple platforms
          GOOS=darwin GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o logmcp-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o logmcp-darwin-arm64 .
          GOOS=linux GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o logmcp-linux-amd64 .
          # Windows build disabled because I don't have a Windows machine to test it
          # GOOS=windows GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o logmcp-windows-amd64.exe .

      - name: Create checksums
        run: |
          sha256sum logmcp-* > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          files: |
            logmcp-darwin-amd64
            logmcp-darwin-arm64
            logmcp-linux-amd64
            checksums.txt
          body: |
            ${{ env.RELEASE_NOTES }}
            
            ## Installation

            ### Download Binary
            
            Download the appropriate binary for your platform and make it executable:
            
            **macOS (Intel)**
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ env.TAG_NAME }}/logmcp-darwin-amd64 -o logmcp
            chmod +x logmcp
            sudo mv logmcp /usr/local/bin/
            ```
            
            **macOS (Apple Silicon)**
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ env.TAG_NAME }}/logmcp-darwin-arm64 -o logmcp
            chmod +x logmcp
            sudo mv logmcp /usr/local/bin/
            ```
            
            **Linux**
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ env.TAG_NAME }}/logmcp-linux-amd64 -o logmcp
            chmod +x logmcp
            sudo mv logmcp /usr/local/bin/
            ```
            **Windows**

            Windows binaries are not currently built due to lack of testing environment and due to the app reliance on posix signal handling.

            <!--
            
            Download `logmcp-windows-amd64.exe` and add it to your PATH.
            
            ### Install Script
            
            ```bash
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
            ```
            -->
            
            ## Disclaimer
            
            ‚ö†Ô∏è This software is 100% AI-generated. Use at your own risk.
          draft: false
          prerelease: false